shaderSource[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;


	varying vec3 rayDir;

	uniform vec3 eye;



	//varying vec3 worldNormal;
	varying vec3 worldPosition;

	uniform vec4 lightPos[2];
	uniform vec4 lightPowerDensity[2];
	uniform mat4 quadrics[60];
    uniform vec4 brdfs[30];
    uniform mat4 clippers[60];



	uniform samplerCube envmapTexture;
	uniform sampler2D colorTexture;


	vec3 beachBallColor(vec3 r) {
		return vec3(0, 0, 0);
	}

	float f(vec3 r) {
	  vec3 s = vec3(7502, 22777, 4767);
	  float w = 0.0;
	  for(int i=0; i<16; i++) {
	    w += sin( dot(s - vec3(32768, 32768, 32768),
	            r * 40.0) / 65536.0);
	    s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
	  }
	  return w / 32.0 + 0.5;
	}
	

	vec3 wood(vec3 intersection, vec3 surfNormal, vec3 d) {

		float scale = 16.0;
		float turbulence = 500.0;
		float period = 8.0;
		float sharpness = 10.0;
	

		//return normal;
		float w = intersection.x * period + pow(f(intersection * scale), sharpness)*turbulence + 10000.0;
		//w -= int(w);
		return (vec3(1, 0.3, 0) * w + vec3(0.35, 0.1, 0.05) * (1.0-w)) * dot(surfNormal, d);
	}

	vec3 gradientNoise(vec3 r) {
  		vec3 s = vec3(7502, 22777, 4767);
  		vec3 w = vec3(0.0, 0.0, 0.0);
  		for(int i=0; i<16; i++) {
    		w += cos( dot(s - vec3(32768, 32768, 32768),
              	r*40.0) / 65536.0) 
         		* (s - vec3(32768, 32768, 32768)) * 40.0;
    	s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
  		}
  		return w / 65536.0;
	}


	float intersectClippedQuadric(mat4 A, vec4 e, vec4 d, mat4 B) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) +  dot(e * A, d);
		float c = dot(e * A, e);

		float discrim = b * b - (4.0 * a * c);

		if(discrim < 0.0) {
			return -1.0;
		} else {
		   float t1 = (b * -1.0 + sqrt(discrim)) / (2.0*a);
		   float t2 = (b * -1.0 - sqrt(discrim)) / (2.0*a);


		   float rBr1 = dot((e + d * t1) * B, (e + d * t1));
		   float rBr2 = dot((e + d * t2) * B, (e + d * t2));

		   if(rBr1 > 0.0) {
		   		t1 = -1.0;
		   } 
		   if(rBr2 > 0.0) {
		   		t2 = -1.0;
		   }

		   float t = min(t1, t2);

		   if (t < 0.0) {
		   		t = max(t1, t2);
		   }

		   return t;
		} 

	
	}

	float intersectMultiClippedQuadric(mat4 A, vec4 e, vec4 d, mat4 B, mat4 C) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) +  dot(e * A, d);
		float c = dot(e * A, e);

		float discrim = b * b - (4.0 * a * c);

		if(discrim < 0.0) {
			return -1.0;
		} else {
		   float t1 = (b * -1.0 + sqrt(discrim)) / (2.0*a);
		   float t2 = (b * -1.0 - sqrt(discrim)) / (2.0*a);


		   float rBr1 = dot((e + d * t1) * B, (e + d * t1));
		   float rBr2 = dot((e + d * t2) * B, (e + d * t2));

		   if(rBr1 > 0.0) {
		   		t1 = -1.0;
		   } 
		   if(rBr2 > 0.0) {
		   		t2 = -1.0;
		   }


   			rBr1 = dot((e + d * t1) * C, (e + d * t1));
        	rBr2 = dot((e + d * t2) * C, (e + d * t2));

		       
	       if(rBr1 > 0.0) {
	   			t1 = -1.0;
	       }  
		   if(rBr2 > 0.0) {
		   		t2 = -1.0;
		   }


		 

		   float t = min(t1, t2);

		   if (t < 0.0) {
		   		t = max(t1, t2);
		   }

		   return t;
		} 

	
	}


	bool findBestHit(vec4 e, vec4 d, out float bestT, out mat4 bestA, out vec4 bestBrdf) {
		bestT = -1.0;
		bestA = mat4(0);
		bestBrdf = vec4(0);
		
		for(int i = 0; i < 48; i+=2) {
			float t = -1.0;
			if (i == 10 || i == 12 || i == 16 || i == 18 || i == 20 || i == 22) {
				t = intersectMultiClippedQuadric(quadrics[i], e, d, quadrics[i + 1], clippers[i]);

			} else {
			    t = intersectClippedQuadric(quadrics[i], e, d, quadrics[i + 1]);


			}
			if(t > 0.0) {
				if(bestT < 0.0) {
					bestT = t;
					bestA = quadrics[i];
					bestBrdf = brdfs[i/2];
				} else {
					if(t < bestT) {
						bestT = t;
						bestA = quadrics[i];
						bestBrdf = brdfs[i/2];

					}
				}
			} 
 	
	   	}

	   	if(bestT < 0.0) {
			return false;
		}

	   	 return true;
	
	}

	vec3 calculateColor(float shininess, vec3 worldPosition, vec3 worldNormal, vec4 intersection, vec4 brdf) {

		//float shininess = 10.0;
		vec3 rgb = vec3(0, 0, 0);
		vec3 specular = vec3(0, 0, 0);
		vec3 diffuse = vec3(0, 0, 0);



		for(int i = 0; i < 2; i++) {
	   	  vec3 l = lightPos[i].xyz - worldPosition;  
	   	  vec3 view = normalize(eye - worldPosition);
	   	  float squared = dot(l, l);

	   	/////////////////////////////////////////////////////////

		   	vec4 surfacePt = intersection + vec4(worldNormal * .01, 0);

		   	vec3 lightDistanceFromPoint = lightPos[i].xyz - surfacePt.xyz;

		   	vec3 lightNormal = normalize(lightPos[i].xyz);

		   	float bestShadowT;
		   	mat4 bestA;
		   	vec4 bestBrdf;

		   	bool shadowPresent = findBestHit(surfacePt, vec4(lightNormal, 0), bestShadowT, bestA, bestBrdf);

		  if(lightPos[i].w == 1.0) {
		  	if(!shadowPresent || bestShadowT > length(lightDistanceFromPoint)) {
		  		       vec3 normL = normalize(l);
			     	   vec3 halfway = normalize(view + normL);
			   	       float cosine = dot(halfway, normalize(worldNormal)) / (length(halfway) * length(worldNormal));
			  	  	   cosine = pow(cosine, shininess); 
			     	   specular = max(cosine, 0.0) * (lightPowerDensity[i].xyz/squared) * vec3(1, 1, 1); 

			     	   
			  	  	   float lightAngle = dot(normalize(worldNormal), normL); 

			  	  	   diffuse = max(lightAngle, 0.0) * brdf.xyz * lightPowerDensity[i].xyz/squared;
			  	  	   rgb += specular + diffuse;

		  	}

		  } else {
		  	 if(!shadowPresent || bestShadowT > 10000000000.0) {

			   	  	   vec3 normL = normalize(lightPos[i].xyz);
			           vec3 halfway = normalize(view + normL);

			  	  	   float cosineDir = pow(dot(halfway, normalize(worldNormal)), shininess); 
			  	  	   specular = max(cosineDir, 0.0) * lightPowerDensity[i].xyz * vec3(1, 1, 1);

			  	  	   float lightAngle = dot(normalize(worldNormal), normL); 

			  	  	   diffuse = max(lightAngle, 0.0) * brdf.xyz * lightPowerDensity[i].xyz;
			  	  	   rgb += specular + diffuse;

		  	 }

		  }
		  }
		  

			  
	   	 return rgb;

	}


void main(void) {

	

    vec4 e = vec4(eye.xyz, 1);
    vec4 d = vec4(normalize(rayDir.xyz), 0);

    float bestT;
    mat4 bestA;
    vec4 bestBrdf;

	vec3 contrib = vec3(1, 1, 1);
	vec4 radiance = vec4(0, 0, 0, 0);
	bool hit;

    for(int i = 0; i < 2; i++) {
	    hit = findBestHit(e,d, bestT, bestA, bestBrdf);
	    if (!hit) {

	   		radiance = vec4((textureCube(
        		envmapTexture, d.xyz)).xyz, 1);
		    contrib = vec3(0, 0, 0);
	   		break;
	    }

	   	vec4 intersection = e + d * bestT;
	    vec4 norm = (intersection  * bestA)  +  (bestA * intersection);
	    vec3 surfNormal = normalize(norm.xyz);




	   	if (dot(d.xyz, surfNormal) > 0.0) {
	   		surfNormal = surfNormal * -1.0;
	   	} 


	   	if(bestBrdf.w < 200.0) {

	   		if(bestBrdf.w == .1) { //beach ball
		     	float angle = atan(surfNormal.z,surfNormal.x);
			    float indicator = fract(angle * 1.0);
			    if (indicator < 0.5) {

			    	 radiance += vec4(calculateColor(7.0 , worldPosition, surfNormal, intersection, vec4(.7, .5, .7, 0)) * contrib, 1);


			    } else {

	   		        // surfNormal = gradientNoise(surfNormal);
			    //

			    	 radiance += vec4(calculateColor(7.0, worldPosition, surfNormal, intersection, vec4(1, 1, 1, 0)) * contrib, 1);

			    }

		     } else if (bestBrdf.w > 1.0){ //shiny
		     	if(bestBrdf.w == 11.0) {
		     		if(sin(surfNormal.y  + fract(intersection.x)) < .6 || sin(surfNormal.y  + fract(intersection.z)) < .6) {
		     		//sin(intersection.x * intersection.y * fract(intersection.y)) > .5
		     			radiance = vec4((textureCube(envmapTexture, d.xyz)).xyz, 1);
		     		} else {
		     			radiance+= vec4(calculateColor(bestBrdf.w, worldPosition, surfNormal, intersection, bestBrdf) * contrib, 1);
		     		}

		     	} else if(bestBrdf.w == 4.0) {
		     		//surfNormal.z = (.05 * sin(surfNormal * 350.0)).z;
		     		surfNormal.x = (.05 * sin(surfNormal * 800.0)).x;

		     		radiance += vec4(calculateColor(bestBrdf.w, worldPosition, surfNormal, intersection, bestBrdf) * contrib, 1);

		     	}else {

		     		radiance += vec4(calculateColor(bestBrdf.w, worldPosition, surfNormal, intersection, bestBrdf) * contrib, 1);
		     	}
		     }  else {
		     	if(bestBrdf.w == .5) {
		     		//vec3 textureColor = vec3(texture2D(colorTexture, vec2(intersection.x*.1, intersection.z*.1)));
		     		//radiance = vec4(textureColor * vec3(1, .2, 3), 1);
		     		//radiance = vec4(wood(intersection.xyz, surfNormal, d.xyz), 1);
		     		//vec3 intersection, vec3 surfNormal, vec3 d

		     		float sum = intersection.x + intersection.y + intersection.x;


		     		float modColor = mod(sum, 2.0);

					if(modColor >= 1.0) {


						radiance += vec4(calculateColor(1.0 , worldPosition, surfNormal, intersection, vec4(.6, .5, .5, 0)) * contrib, 1);
					}
					else {
						radiance += vec4(calculateColor(1.0 , worldPosition, surfNormal, intersection, bestBrdf) * contrib, 1);
					}

		     	}
		     //diffuse
			    else {
			     radiance += vec4(calculateColor(1.0, worldPosition, surfNormal, intersection, bestBrdf) * contrib, 1);
			     }

		     }
	   	 	
	   		break;


	   	} else {
	   		//mirror
		   	contrib *= bestBrdf.xyz;
			surfNormal.y += 0.002*sin(d.x*d.y*1000.0);

			surfNormal.x += 0.002*cos(d.x*d.y*d.z*700.0 );




			d = vec4(normalize(reflect(d.xyz, surfNormal)), 0) ;
			e = vec4(intersection.xyz + normalize(surfNormal)*0.01, 1);

	   	}  
		     

	} 
	gl_FragColor = radiance;


     


	   
}




`;



